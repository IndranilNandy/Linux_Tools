Command syntax:
    springstarter env secrets dotenv SUBCOMMAND [Options]
    See below for more details.

Description:
    Provides utility tool for -
            > quick setting of .env in project root
            > syncing of .env and .env.def with remote git-store
            > encrypting updated .env in 'global' scope and manually pushing it to git-store

    .env        > this contains a list of environment variables along with suggested values (which might needs be updated in 'local' scope depending on project's configuration)
    .env.def    > this contains the definitions of the environment variables defined in .env

Note:
    This script should be run from the root directory of the spring project.
-------------------------------------------------------------------------------------------------------------------------------------------

Scopes:

    'git-remote'----> (A) syncs to ----> 'remote'----> (B) copies to ----> 'global'----> (C) copies to ----> 'local'

    > if 'local' .env already exists, in NO WAY it can be overriden.
        >> hence, 'load' and 'sync' commands ARE SAFE for 'local' .env
        >> the only way you can update an existing 'local' .env is using the 'merge' command

    > if 'local' .env doesn't exist, it is copied from 'global' scope.
        >> hence, if 'global' copy is updated, all new projects, created after the update, will get the updated copy.
        >> BE CAUTIOUS before updating a 'global' copy

    > if 'global' copy doesn't exist,
        >> using 'sync' command, it can be copied from 'remote' scope
                >>> this will first fetch from git-store to 'remote', even if .env exists in 'remote'
                >>> then copies to 'global' if 'global' .env doesn't exist
                >>> if '--f' is applied, then even if 'global' .env exists, it still copies from 'remote' to 'global'
        >> more preferrably, using 'load' command it would be done implicitly while populating the local .env file
                >>> if 'local' .env doesn't exist, it'll first invoke 'sync' and then copy to 'local' scope
                >>> if 'local' .env exists, but 'global' .env doesn't (only when you manually deleted it), then you've to explicitly use 'sync'

    > if 'remote' copy doesn't exist,
        >> using 'sync' command, will sync 'remote' with 'git-remote'
            >>> next, it'll copy to 'global' scope either if 'global' .env doesn't exist or '--f' option is used
        >> 'remote' copies are read-only
-------------------------------------------------------------------------------------------------------------------------------------------

Quick glance:

    Operation   | 'local'   | 'global'  | 'remote'  | Option    | Sequence
    -------------------------------------------------------------------------
    load        |   X       |   X       |   X       |           | A -> B -> C
    -------------------------------------------------------------------------
    load        |   X       |   X       |   Y       |           | A -> B -> C
    -------------------------------------------------------------------------
    load        |   X       |   Y       |   Y       |           | C
    -------------------------------------------------------------------------
    load        |   Y       |   Y       |   Y       |           | no operation
    -------------------------------------------------------------------------
    load        |   Y       |   X       |   Y       |           | A -> B
    -------------------------------------------------------------------------
    sync        |   X       |   X       |   X       |           | A -> B
    -------------------------------------------------------------------------
    sync        |   X       |   X       |   Y       |           | A -> B
    -------------------------------------------------------------------------
    sync        |   X       |   Y       |   Y       |           | A
    -------------------------------------------------------------------------
    sync        |   X       |   Y       |   Y       | --f       | A -> B
    -------------------------------------------------------------------------
    sync        |   Y       |   Y       |   Y       |           | A
    -------------------------------------------------------------------------
    sync        |   Y       |   Y       |   Y       | --f       | A -> B
    -------------------------------------------------------------------------
    sync        |   Y       |   X       |   Y       |           | A -> B
    -------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------

Subcommands:

    load:       should be run from the project root folder only
                used to populate .env in project root folder
                THIS SHOULD BE THE MOST USED COMMAND FOR GENERAL PURPOSE. THIS COMMAND IS SAFE as it will never update 'local' .env if it exists
                if 'local' .env doesn't exist, it copies from 'global' if exists, otherwise first internally use 'sync' to populate 'remote', then copy to 'global' and then to 'local'
                if 'local' .env does exist, it cannot be overriden, you can only use 'merge' command to update it after merging with updated 'global' and 'remote'

    sync:       can be run from any location
                used to sync 'remote' and 'global'
                always fetches and replaces 'remote' copy from git-store.
                but 'global' copy isn't updated if it exists, or otherwise forcefully updated with '--f' option
                doesn't touch 'local' copy

    show:       can be run from any location
                used to show env copies from all three scopes
                    --remote: to show remote copies
                    --global: to show global copies
                    --local: to show local copies (only .env)
                    no option is equivalent to --global

    merge:      should be run from the project root folder only
                used to 3-way 'merge' the local .env with updated 'global' and 'remote' .env, and 2-way 'merge' the 'global' .env.def with 'remote' .env.def.original

    encrypt:    can be run from any location
                used to encrypt the 'global' copy
                you've to manually push it to remote git-store (in Scripts_store)

    help:
                Shows the help contents on this command.
-------------------------------------------------------------------------------------------------------------------------------------------

Storage layout:

    $HOME/myscrtstore/dotenv/remote             : env files (.env.original and .env.def.original) from remote git-store is synced here as 'remote' scoped
    $HOME/myscrtstore/dotenv/global             : env files (.env and .env.def) from 'remote' folder, is copied here as 'global' scoped
    $HOME/myscrtstore/dotenv/versions_to_push   : encrypted .env file created from updated 'global' .env file, and needs to be manually pushed to the remote git-store (Scripts_store)
    $(pwd)/                                     : this is the project root directory where '.env' file is copied as 'local' scoped from 'global' scop
-------------------------------------------------------------------------------------------------------------------------------------------

Usage:

    load:
        springstarter env secrets dotenv load

    sync:
        springstarter env secrets dotenv sync
        springstarter env secrets dotenv sync --f

    show:
        springstarter env secrets dotenv show   [equivalent to --global]
        springstarter env secrets dotenv show --local
        springstarter env secrets dotenv show --global
        springstarter env secrets dotenv show --remote

    merge:
        springstarter env secrets dotenv merge

    encrypt:
        springstarter env secrets dotenv encrypt

    help:
        springstarter env secrets dotenv help
-------------------------------------------------------------------------------------------------------------------------------------------

Aliases:

    ssdotenv    : springstarter env secrets dotenv
    ssdotenvgen : springstarter env secrets dotenv load
-------------------------------------------------------------------------------------------------------------------------------------------

Examples:

    See usage above
-------------------------------------------------------------------------------------------------------------------------------------------

