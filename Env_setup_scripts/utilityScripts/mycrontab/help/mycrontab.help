Description:
    Provides 'crontab' functionality with an abstraction layer.

    WARNING!!   DO NOT USE BOTH CRONTAB AND MYCRONTAB COMMANDS TO SCHEDULE THE JOBS.
                > crontab jobs will be lost after using 'mycrontab' commands
                > if you've crontab jobs, put them into mycrontab configs
                > use 'mycrontab --backup' to take a backup of all crontab and mycrontab jobs, and then put the crontab job definitions
                  in mycrontab configs
                > initial setup always takes a backup of all jobs.
                > 'mycrontab --clean' also takes backup of all jobs.

    Schedule definitions:
        mycrontab                   : format in which schedule information is stored when 'mycrontab' command is used.
                                      ex. **indranilnandy 11 * * * * sh $HOME/MyTools/Linux_Tools/Setup_stages/Automated_post_setup/mycrontab/cronjobs/testscript.sh**
        crontab                     : format in which schedule information is stored when 'crontab' command is used.
                                      ex. **indranilnandy 11 * * * * sh /home/indranilnandy/MyTools/Linux_Tools/Setup_stages/Automated_post_setup/mycrontab/cronjobs/generated/testscript.sh**

    Locations:
        .crontabs/*                     : location for storing schedule definitions
        .crontabs/.crontab-global        : this is GLOBAL configuration applicable across machines, and hence should go to repo
        .crontabs/.crontab-local         : this is LOCAL configuration applicable to only current local machine, and shouldn't go to repo

        ./cronjobs/*                    : location for all user-defined job definitions/scripts
        ./cronjobs/generated            : location for autogenerated scripts. These are the translations from the user-defined scripts,
                                          mainly providing specific log-file targets

        ./cronbackups/*                 : location for all backups of the existing job definitions (mycrontab and crontab definitions)
        ./cronbackups/cron-defs/*       : stores 'crontab' definitions.REMEMBER that jobs scheduled using BOTH 'crontab' and 'mycrontab' commands are backed up here.
        ./cronbackups/mycron-defs/*     : stores 'mycrontab' definitions. Remember that jobs scheduled using 'mycrontab' command ONLY are backed up here.

        ./cronlogs/*                    : stores logs of all jobs

How to add/delete a job-schedule?
    [MANUAL]
    Run 'mycrontab --config'
                                -> Opens the configs in default editor. Add/delete your jobs here in proper format. Either choose .crontab-global or .crontab-local.
                                -> Adds to the schedule configs of mycrontab, and also updates underlying crontab configs, which EFFECTIVELY SCHEDULES the jobs.
                                -> NOTE: If you manually launch the configs without using 'mycrontab --config' command, then after saving the configs, you've to manually
                                   run 'mycrontab --schedule' to update the underlying crontab configs to effectively schedule the jobs.
                                -> WARNING!! ALL JOBS SCHEDULED DIRECTLY USING CRONTAB COMMAND WILL BE LOST. Use 'mycrontab --backup' to backup all the jobs (both mycrontab and crontab)
    OR,
    [PROGRAMMATIC]
    Still not added.

How to add a new job entry?
    Two options available-
    [Adding a job from scratch]
    Run 'mycrontab --job-name=<job_name>'
                                -> Open the default editor with ./cronjobs/job_name file (if it doesn't exist).
                                -> Add the job code here and save.
                                -> REMEMBER that the job is just added to the list of available jobs to schedule. It still doesn't have any schedule.
                                -> To schedule the job run 'mycrontab --config' and provide schedule information.
    OR,
    [Adding an existing job/script]
    Run 'mycrontab --job-path=<job_path_absolute>'
                                -> Copies the provided script with absolute path to the job location (./cronjobs/) used for mycrontab.
                                -> REMEMBER that the job is just added to the list of available jobs to schedule. It still doesn't have any schedule.
                                -> To schedule the job run 'mycrontab --config' and provide schedule information.

How to refresh all the schedules?
    Run 'mycrontab --schedule'
                                -> Updates underlying crontab configs with the schedule configs of mycrontab, and schedules the jobs.
                                -> WARNING!! ALL JOBS SCHEDULED DIRECTLY USING CRONTAB COMMAND WILL BE LOST. Use 'mycrontab --backup' to backup all the jobs (both mycrontab and crontab)

Usage:
    mycrontab --init
        After a fresh setup, initializes cron.allow and .crontab-* config files. NO NEED to be called by the user anyway (called implicitly).

    mycrontab --config
        1. Opens the configs in default editor. Add your jobs here in proper format. Either choose .crontab-global or .crontab-local.
        2. Adds to the schedule configs of mycrontab, and also updates underlying crontab configs, which EFFECTIVELY SCHEDULES the jobs.
        3. NOTE: If you manually launch the configs without using 'mycrontab --config' command, then after saving the configs, you've to manually
           run 'mycrontab --schedule' to update the underlying crontab configs to effectively schedule the jobs.
        4. WARNING!! ALL JOBS SCHEDULED DIRECTLY USING CRONTAB COMMAND WILL BE LOST. Use 'mycrontab --backup' to backup all the jobs (both mycrontab and crontab)

    mycrontab --schedule
        1. Updates underlying crontab configs with the schedule configs of mycrontab, and schedules the jobs.
        2. WARNING!! ALL JOBS SCHEDULED DIRECTLY USING CRONTAB COMMAND WILL BE LOST. Use 'mycrontab --backup' to backup all the jobs (both mycrontab and crontab)

    mycrontab --job-name=<job_name>
        1. Open the default editor with ./cronjobs/job_name file (if it doesn't exist).
        2. Add the job code here and save.
        3. REMEMBER that the job is just added to the list of available jobs to schedule. It still doesn't have any schedule.
        4. To schedule the job run 'mycrontab --config' and provide schedule information.

    mycrontab --job-path=<job_path_absolute>
        1. Copies the provided script with absolute path to the job location (./cronjobs/) used for mycrontab.
        2. REMEMBER that the job is just added to the list of available jobs to schedule. It still doesn't have any schedule.
        3. To schedule the job run 'mycrontab --config' and provide schedule information.

    mycrontab --users
        1. Shows all the users allowed for crontab. (from /etc/cron.allow)

    mycrontab --jobs -a/-u
        1. Shows all the mycrontab as well as crontab jobs.
        2. REMEMBER to not use crontab along with mycrontab. Migrate crontab jobs to mycrontab.
        3. Two sub options available. Default option is '-a'.
            mycrontab --backup -a
                backup all jobs (mycrontab + cronab) for all users.
            mycrontab --backup -u=<user>
                backup all jobs (mycrontab + crontab) for 'user' only

    mycrontab --backup -cron-def/-mycron-def
        1. Backup all the jobs of all users.
        2. Two sub options available. If no sub option is provided, then both will be executed.
            mycrontab --backup -cron-def
                backup crontab jobs for all users.
            mycrontab --backup -mycron-def
                backup mycrontab jobs for all users.

    mycrontab --show-logs
        1. Opens the default editor with the directory of log-location (./cronlogs/). (only for mycrontab jobs)

    mycrontab --show-backups
        1. Opens the default editor with the directory of backup-location (./cronbackups/). (mycrontab + crontab jobs)

    mycrontab --clean
        1. Clean all the jobs (mycrontab + crontab)
        2. WARNING!! ALL JOBS SCHEDULED DIRECTLY USING CRONTAB COMMAND WILL BE LOST.
        3. Automatically does a backup of all the jobs (mycrontab + crontab)
        4. Two sub options are available.

        mycrontab --clean -a
            clean up all the jobs (mycrontab + crontab) of all users.
        mycrontab --clean -u=<user>
            clean up all the jobs (mycrontab + crontab) of 'user' only.

    mycrontab --clean-logs
        1. Clean all the logs of all scheduled jobs (mycrontab)

    mycrontab --clean-backups
        1. Clean all the backups of all jobs (mycrontab + crontab)

    mycrontab --help
        1. Help content of mycrontab.

Examples:
    mycrontab --init
    mycrontab --config
    mycrontab --schedule
    mycrontab --job-name='script_name'
    mycrontab --job-path='script_absolute_path'
    mycrontab --users
    mycrontab --jobs
    mycrontab --jobs -a
    mycrontab --jobs -u='user'
    mycrontab --backup
    mycrontab --backup -cron-def
    mycrontab --backup --mycron-def
    mycrontab --show-logs
    mycrontab --show-backups
    mycrontab --clean -a
    mycrontab --clean -u='user'
    mycrontab --clean-logs
    mycrontab --clean-backups
    mycrontab --help
