#!/bin/bash

declare -A mydirs

update_tab_completions() {
    mycompl -W '"'"${!mydirs[@]}" --list --config --help'"' qcd
    mycompl -W '"'"${!mydirs[@]}" --list --config --help'"' qcode
    mycompl -W '"'"${!mydirs[@]}" --list --config --help'"' qn
}

buildqcdmap() {
    if [[ -z $(which myfunc) ]]; then
        curDir=$(pwd)
    else
        curDir=$(dirname "$(tracelink "$(which myfunc)")")
    fi

    for line in $(cat "$curDir"/.funcs/qcd/.mappings | xargs -I X echo X); do
        cdir=$(echo "$line" | cut -d':' -f1)
        target=$(echo "$line" | cut -d':' -f2)
        mydirs["$cdir"]="$target"
    done
    update_tab_completions
}

qcd() {
    if [[ -z $(which myfunc) ]]; then
        curDir=$(pwd)
    else
        curDir=$(dirname "$(tracelink "$(which myfunc)")")
    fi

    case ${1} in
    --list)
        cat "$curDir"/.funcs/qcd/.mappings
        ;;
    --config)
        editor "$curDir"/.funcs/qcd/.mappings
        ;;
    --help)
        cat "$curDir"/.funcs/qcd/qcd.help
        ;;
    '')
        cat "$curDir"/.funcs/qcd/qcd.help
        ;;
    *)
        # REMEMBER: Don't call "source ~/.bashrc" inside buildqcdmap and after update_tabcompletions -> it'll be recursive
        [[ -z ${mydirs[${1}]} ]] && buildqcdmap && source ~/.bashrc

        if [[ -z ${mydirs[${1}]} ]]; then
            (("$#" < 2)) && echo -e "Missing dir-target parameter" && return 1
            target="${2}"
            [[ "$target" == "." ]] && target=$(pwd)
            [[ $(echo "$target" | grep -F "/home/") ]] && target=$(echo "$target" | sed "s#/[^/]*/[^/]*\(/.*\)#\$HOME\1#")

            echo -e "${1}:$target" >>"$curDir"/.funcs/qcd/.mappings
            mydirs["${1}"]="$target"
            update_tab_completions && source ~/.bashrc
        else
            (("$#" == 2)) && echo -e "dir-alias already exists. Ignoring dir-target."
            eval "cd ${mydirs[${1}]}"
        fi
        ;;
    esac
}

qcode() {

    if [[ -z $(which myfunc) ]]; then
        curDir=$(pwd)
    else
        curDir=$(dirname "$(tracelink "$(which myfunc)")")
    fi

    case ${1} in
    --list)
        cat "$curDir"/.funcs/qcd/.mappings
        ;;
    --config)
        editor "$curDir"/.funcs/qcd/.mappings
        ;;
    --help)
        cat "$curDir"/.funcs/qcd/qcode.help
        ;;
    '')
        cat "$curDir"/.funcs/qcd/qcode.help
        ;;
    *)
        (qcd "${1}" && code .)
        ;;
    esac
}

qn() {
    if [[ -z $(which myfunc) ]]; then
        curDir=$(pwd)
    else
        curDir=$(dirname "$(tracelink "$(which myfunc)")")
    fi

    case ${1} in
    --list)
        cat "$curDir"/.funcs/qcd/.mappings
        ;;
    --config)
        editor "$curDir"/.funcs/qcd/.mappings
        ;;
    --help)
        cat "$curDir"/.funcs/qcd/qn.help
        ;;
    '')
        cat "$curDir"/.funcs/qcd/qn.help
        ;;
    *)
        for dir in $(echo "$@" | xargs -n1); do
            eval "nautilus ${mydirs[$dir]}"
        done
        ;;
    esac
}

buildqcdmap
