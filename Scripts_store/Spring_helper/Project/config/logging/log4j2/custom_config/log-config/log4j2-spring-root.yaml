# Configuration Syntax: https://logging.apache.org/log4j/2.x/manual/configuration.html#ConfigurationSyntax
# Filters: https://logging.apache.org/log4j/2.x/manual/Filters.html
# Appenders: https://logging.apache.org/log4j/2.x/manual/appenders.html
# Layouts: https://logging.apache.org/log4j/2.x/manual/layouts.html
Configuration:
    name: YAMLConfigTest
    advertiser: multicastdns		# (Optional) The Advertiser plugin name which will be used to advertise individual FileAppender or SocketAppender configurations. The only Advertiser plugin provided is 'multicastdns".
    status: warn					# Setting status="trace" is one of the first tools available to you if you need to troubleshoot log4j.
    monitorInterval: 300			# The minimum amount of time, in seconds, that must elapse before the file configuration is checked for changes.
    dest: generated/logs/log4j2-debug.log	 # Either "err" for stderr, "out" for stdout, a file path, or a URL. This logs log4j2 internal events.

    Properties:
        Property:
            -
                name: appname
                # value: ${spring:spring.application.name}
                value: productsvc
            -
                name: groupid
                value: com.mydomain.core
            -
                name: artifactid
                value: product
            -
                name: log-path
                value: generated/logs/current
            -
                name: archive-path
                value: generated/logs/archive
            -
                name: logs-app
                value: ${log-path}/application
            -
                name: archive-path-app
                value: ${archive-path}/application
            -
                name: package-name-root
                value: _aggregated
            -
                name: package-logs-root
                value: ${log-path}/${package-name-root}
            -
                name: package-archive-path-root
                value: ${archive-path}/${package-name-root}
            -
                name: package-logfile-rolling-root
                value: ${appname}-rolling-${package-name-root}
            -
                name: package-archive-rolling-path-root
                value: ${package-archive-path-root}/rolling
            -
                name: LOG_PATTERN_SIMPLE
                value: "%d{ISO8601_OFFSET_DATE_TIME_HHCMM} %highlight{%-5p} %pid --- [%t][%T] %style{[%-40.40logger{1.}]}{magenta}: %m%highlight{%rEx{full}}%n"
            -
                name: LOG_PATTERN_VERBOSE
                value: "%d{ISO8601_OFFSET_DATE_TIME_HHCMM} [%N] %highlight{%-5p} %pid --- [%t][%T] %style{[%-50.50logger{1.}]}{magenta} %style{[%-50.50class{1.}]}{blue} %style{[%-90.90location{1.}]}{cyan}: %m%highlight{%rEx{full}}%n"
            -
                name: LOG_PATTERN_ALL
                value: "%d{ISO8601_OFFSET_DATE_TIME_HHCMM} [%N] %highlight{%-5p} %pid --- [%t][%T] %style{[%-50.50logger{1.}]}{magenta} %style{[%-50.50class{1.}]}{blue} %style{[%-90.90location{1.}]}{cyan} << %map %style{%x}{BG_Blue} %style{%X}{BG_Yellow} %style{%notEmpty{[%marker]}}{Yellow} >>: %m%highlight{%rEx{full}}%n"
            -
                name: LOG_PATTERN_SIMPLE_WITHOUT_ANSI
                value: "%d{ISO8601_OFFSET_DATE_TIME_HHCMM} %-5p %pid --- [%t][%T] [%-40.40logger{1.}]: %m%rEx{full}%n"
            -
                name: LOG_PATTERN_VERBOSE_WITHOUT_ANSI
                value: "%d{ISO8601_OFFSET_DATE_TIME_HHCMM} [%N] %-5p %pid --- [%t][%T] [%-50.50logger{1.}] [%-50.50class{1.}] [%-90.90location{1.}]: %m%rEx{full}%n"
            -
                name: LOG_PATTERN_ALL_WITHOUT_ANSI
                value: "%d{ISO8601_OFFSET_DATE_TIME_HHCMM} [%N] %-5p %pid --- [%t][%T] [%-50.50logger{1.}] [%-50.50class{1.}] [%-90.90location{1.}] << %map %x %X %notEmpty{[%marker]} >>: %m%rEx{full}%n"
            -
                name: currentLogLevel
                value: ${LOG_PATTERN_ALL_WITHOUT_ANSI}


    # Note: Context-wide Filters are configured directly in the configuration. Events that are rejected by these Filters will not be passed to loggers for further processing. Once an event has been accepted by a Context-wide filter it will not be evaluated by any other Context-wide Filters nor will the Logger's Level be used to filter the event. The event will be evaluated by Logger and Appender Filters however.
    Filters:
        ThresholdFilter:
            level: trace
            onMatch: neutral	# [Default: neutral] May be ACCEPT, DENY or NEUTRAL. The default value is NEUTRAL.
            onMismatch: neutral	# [Default: deny] May be ACCEPT, DENY or NEUTRAL. The default value is DENY.

    Appenders:

        # ConsoleAppender writes its output to either System.out or System.err with System.out being the default target. A Layout must be provided to format the LogEvent.
        Console:
            name: STDOUT
            target: SYSTEM_OUT	  # Either "SYSTEM_OUT" or "SYSTEM_ERR". The default is "SYSTEM_OUT".
            # If no layout is supplied the default pattern layout of "%m%n" will be used.
            PatternLayout:
                header: "%style{Start of logging. [%d]}{BG_Green}%n"
                footer: "%style{End of logging. [%d]}{BG_Green}%n"
                pattern: ${LOG_PATTERN_SIMPLE}
            Filters:
                ThresholdFilter:
                    level: trace
                    onMatch: neutral
                    onMismatch: neutral
            ignoreExceptions: true	  # The default is true, causing exceptions encountered while appending events to be internally logged and then ignored. When set to false exceptions will be propagated to the caller, instead. You must set this to false when wrapping this Appender in a FailoverAppender.
            # follow:					 # Identifies whether the appender honors reassignments of System.out or System.err via System.setOut or System.setErr made after configuration. Note that the follow attribute cannot be used with Jansi on Windows. Cannot be used with direct.
            # direct:					 # Write directly to java.io.FileDescriptor and bypass java.lang.System.out/.err. Can give up to 10x performance boost when the output is redirected to file or other process.

        # The RollingFileAppender is an OutputStreamAppender that writes to the File named in the fileName parameter and rolls the file over according the TriggeringPolicy and the RolloverPolicy.
        RollingFile:
            -
                name: RollingFile-${package-name-root}-normal
                fileName: ${package-logs-root}/${package-logfile-rolling-root}-normal.log	# [REMEMBER: While sing DirectWriteRolloverStrategy, this filed MUST NOT EXIST]
                filePattern: ${package-archive-rolling-path-root}/$${date:yyyy-MM}/${package-name-root}-normal-%d{yyyy-MM-dd-HH-mm}-%i.log.gz
                PatternLayout:
                    header: "%d{ISO8601_OFFSET_DATE_TIME_HHCMM} Start of logging.%n%n"
                    footer: "%n%d{ISO8601_OFFSET_DATE_TIME_HHCMM} End of logging.%n%n%n"
                    pattern: ${currentLogLevel}
                Policies:
                    # Causes a rollover once the date/time pattern no longer applies to the active file
                    TimeBasedTriggeringPolicy:
                        interval: 60		# [Default: 1] How often a rollover should occur based on the most specific time unit in the date pattern.
                        modulate: false		# [Default: false] Indicates whether the interval should be adjusted to cause the next rollover to occur on the interval boundary.
                        maxRandomDelay: 0   # [Default: 0] Indicates the maximum number of seconds to randomly delay a rollover.
                    # Causes a rollover once the file has reached the specified size.
                    SizeBasedTriggeringPolicy:
                        size: 4096 KB		# The size can be specified in bytes, with the suffix KB, MB, GB, or TB, for example 20MB. The size may also contain a fractional value such as 1.5 MB. When combined with a time based triggering policy the file pattern must contain a %i otherwise the target file will be overwritten on every rollover as the SizeBased Triggering Policy will not cause the timestamp value in the file name to change.

                # The default rollover strategy accepts both a date/time pattern and an integer from the filePattern attribute specified on the RollingFileAppender itself. If the date/time pattern is present it will be replaced with the current date and time values. If the pattern contains an integer it will be incremented on each rollover. If the pattern contains both a date/time and integer in the pattern the integer will be incremented until the result of the date/time pattern changes.
                DefaultRolloverStrategy:
                    max: 20				# [Default: 7] The maximum value of the counter. Once this values is reached older archives will be deleted on subsequent rollovers.
                    min: 1				# [Default: 1] The minimum value of the counter.
                    fileIndex: max	# [Default: max] [max/min/nomax] If set to "max" (the default), files with a higher index will be newer than files with a smaller index. If set to "min", file renaming and the counter will follow the Fixed Window strategy described above. Finally, as of release 2.8, if the fileIndex attribute is set to "nomax" then the min and max values will be ignored and file numbering will increment by 1 and each rollover will have an incrementally higher value with no maximum number of files.
                    # compressionLevel: 9	 # Sets the compression level, 0-9, where 0 = none, 1 = best speed, through 9 = best compression. Only implemented for ZIP files.
                    # tempCompressedFilePattern: archived-${package-name-root}-normal-%d{yyyy-MM-dd-HH-mm}-%i.log	   # The pattern of the file name of the archived log file during compression.
                    Delete:
                        basePath: ${package-archive-rolling-path-root}
                        maxDepth: 2
                        # testMode: true	  # [Default: false] If true, files are not deleted but instead a message is printed to the status logger at INFO level. Use this to do a dry run to test if the configuration works as expected.
                        IfFileName:
                            glob: "*/${package-name-root}-normal-*.log.gz"
                        IfLastModified:
                            age: P2D
                            # age: PT1S	# https://logging.apache.org/log4j/2.x/log4j-core/apidocs/org/apache/logging/log4j/core/appender/rolling/action/Duration.html#parseCharSequence
                Filters:
                    ThresholdFilter:
                        level: info
                        onMatch: accept
                        onMismatch: deny
            -
                name: RollingFile-${package-name-root}-verbose
                fileName: ${package-logs-root}/${package-logfile-rolling-root}-verbose.log	# [REMEMBER: While sing DirectWriteRolloverStrategy, this filed MUST NOT EXIST]
                filePattern: ${package-archive-rolling-path-root}/$${date:yyyy-MM}/${package-name-root}-verbose-%d{yyyy-MM-dd-HH-mm}-%i.log.gz
                PatternLayout:
                    header: "%d{ISO8601_OFFSET_DATE_TIME_HHCMM} Start of logging.%n%n"
                    footer: "%n%d{ISO8601_OFFSET_DATE_TIME_HHCMM} End of logging.%n%n%n"
                    pattern: ${currentLogLevel}
                Policies:
                    # Causes a rollover once the date/time pattern no longer applies to the active file
                    TimeBasedTriggeringPolicy:
                        interval: 60		# [Default: 1] How often a rollover should occur based on the most specific time unit in the date pattern.
                        modulate: false		# [Default: false] Indicates whether the interval should be adjusted to cause the next rollover to occur on the interval boundary.
                        maxRandomDelay: 0   # [Default: 0] Indicates the maximum number of seconds to randomly delay a rollover.
                    # Causes a rollover once the file has reached the specified size.
                    SizeBasedTriggeringPolicy:
                        size: 4096 KB		# The size can be specified in bytes, with the suffix KB, MB, GB, or TB, for example 20MB. The size may also contain a fractional value such as 1.5 MB. When combined with a time based triggering policy the file pattern must contain a %i otherwise the target file will be overwritten on every rollover as the SizeBased Triggering Policy will not cause the timestamp value in the file name to change.

                # The default rollover strategy accepts both a date/time pattern and an integer from the filePattern attribute specified on the RollingFileAppender itself. If the date/time pattern is present it will be replaced with the current date and time values. If the pattern contains an integer it will be incremented on each rollover. If the pattern contains both a date/time and integer in the pattern the integer will be incremented until the result of the date/time pattern changes.
                DefaultRolloverStrategy:
                    max: 20				# [Default: 7] The maximum value of the counter. Once this values is reached older archives will be deleted on subsequent rollovers.
                    min: 1				# [Default: 1] The minimum value of the counter.
                    fileIndex: max	# [Default: max] [max/min/nomax] If set to "max" (the default), files with a higher index will be newer than files with a smaller index. If set to "min", file renaming and the counter will follow the Fixed Window strategy described above. Finally, as of release 2.8, if the fileIndex attribute is set to "nomax" then the min and max values will be ignored and file numbering will increment by 1 and each rollover will have an incrementally higher value with no maximum number of files.
                    # compressionLevel: 9	 # Sets the compression level, 0-9, where 0 = none, 1 = best speed, through 9 = best compression. Only implemented for ZIP files.
                    # tempCompressedFilePattern: archived-${package-name-root}-verbose-%d{yyyy-MM-dd-HH-mm}-%i.log	   # The pattern of the file name of the archived log file during compression.
                    Delete:
                        basePath: ${package-archive-rolling-path-root}
                        maxDepth: 2
                        # testMode: true	  # [Default: false] If true, files are not deleted but instead a message is printed to the status logger at INFO level. Use this to do a dry run to test if the configuration works as expected.
                        IfFileName:
                            glob: "*/${package-name-root}-verbose-*.log.gz"
                        IfLastModified:
                            age: P2D
                            # age: PT1S	# https://logging.apache.org/log4j/2.x/log4j-core/apidocs/org/apache/logging/log4j/core/appender/rolling/action/Duration.html#parseCharSequence
                Filters:
                    ThresholdFilter:
                        level: trace
                        onMatch: accept
                        onMismatch: deny
            -
                name: RollingFile-${package-name-root}-info
                fileName: ${package-logs-root}/${package-logfile-rolling-root}-info.log	# [REMEMBER: While sing DirectWriteRolloverStrategy, this filed MUST NOT EXIST]
                filePattern: ${package-archive-rolling-path-root}/$${date:yyyy-MM}/${package-name-root}-info-%d{yyyy-MM-dd-HH-mm}-%i.log.gz
                PatternLayout:
                    header: "%d{ISO8601_OFFSET_DATE_TIME_HHCMM} Start of logging.%n%n"
                    footer: "%n%d{ISO8601_OFFSET_DATE_TIME_HHCMM} End of logging.%n%n%n"
                    pattern: ${currentLogLevel}
                Policies:
                    # Causes a rollover once the date/time pattern no longer applies to the active file
                    TimeBasedTriggeringPolicy:
                        interval: 60		# [Default: 1] How often a rollover should occur based on the most specific time unit in the date pattern.
                        modulate: false		# [Default: false] Indicates whether the interval should be adjusted to cause the next rollover to occur on the interval boundary.
                        maxRandomDelay: 0   # [Default: 0] Indicates the maximum number of seconds to randomly delay a rollover.
                    # Causes a rollover once the file has reached the specified size.
                    SizeBasedTriggeringPolicy:
                        size: 4096 KB		# The size can be specified in bytes, with the suffix KB, MB, GB, or TB, for example 20MB. The size may also contain a fractional value such as 1.5 MB. When combined with a time based triggering policy the file pattern must contain a %i otherwise the target file will be overwritten on every rollover as the SizeBased Triggering Policy will not cause the timestamp value in the file name to change.

                # The default rollover strategy accepts both a date/time pattern and an integer from the filePattern attribute specified on the RollingFileAppender itself. If the date/time pattern is present it will be replaced with the current date and time values. If the pattern contains an integer it will be incremented on each rollover. If the pattern contains both a date/time and integer in the pattern the integer will be incremented until the result of the date/time pattern changes.
                DefaultRolloverStrategy:
                    max: 20				# [Default: 7] The maximum value of the counter. Once this values is reached older archives will be deleted on subsequent rollovers.
                    min: 1				# [Default: 1] The minimum value of the counter.
                    fileIndex: max	# [Default: max] [max/min/nomax] If set to "max" (the default), files with a higher index will be newer than files with a smaller index. If set to "min", file renaming and the counter will follow the Fixed Window strategy described above. Finally, as of release 2.8, if the fileIndex attribute is set to "nomax" then the min and max values will be ignored and file numbering will increment by 1 and each rollover will have an incrementally higher value with no maximum number of files.
                    # compressionLevel: 9	 # Sets the compression level, 0-9, where 0 = none, 1 = best speed, through 9 = best compression. Only implemented for ZIP files.
                    # tempCompressedFilePattern: archived-${package-name-root}-info-%d{yyyy-MM-dd-HH-mm}-%i.log	   # The pattern of the file name of the archived log file during compression.
                    Delete:
                        basePath: ${package-archive-rolling-path-root}
                        maxDepth: 2
                        # testMode: true	  # [Default: false] If true, files are not deleted but instead a message is printed to the status logger at INFO level. Use this to do a dry run to test if the configuration works as expected.
                        IfFileName:
                            glob: "*/${package-name-root}-info-*.log.gz"
                        IfLastModified:
                            age: P2D
                            # age: PT1S	# https://logging.apache.org/log4j/2.x/log4j-core/apidocs/org/apache/logging/log4j/core/appender/rolling/action/Duration.html#parseCharSequence
                Filters:
                    LevelRangeFilter:
                        maxLevel: info
                        minLevel: info
                        onMatch: accept
                        onMismatch: deny
            -
                name: RollingFile-${package-name-root}-debug
                fileName: ${package-logs-root}/${package-logfile-rolling-root}-debug.log	# [REMEMBER: While sing DirectWriteRolloverStrategy, this filed MUST NOT EXIST]
                filePattern: ${package-archive-rolling-path-root}/$${date:yyyy-MM}/${package-name-root}-debug-%d{yyyy-MM-dd-HH-mm}-%i.log.gz
                PatternLayout:
                    header: "%d{ISO8601_OFFSET_DATE_TIME_HHCMM} Start of logging.%n%n"
                    footer: "%n%d{ISO8601_OFFSET_DATE_TIME_HHCMM} End of logging.%n%n%n"
                    pattern: ${currentLogLevel}
                Policies:
                    # Causes a rollover once the date/time pattern no longer applies to the active file
                    TimeBasedTriggeringPolicy:
                        interval: 60		# [Default: 1] How often a rollover should occur based on the most specific time unit in the date pattern.
                        modulate: false		# [Default: false] Indicates whether the interval should be adjusted to cause the next rollover to occur on the interval boundary.
                        maxRandomDelay: 0   # [Default: 0] Indicates the maximum number of seconds to randomly delay a rollover.
                    # Causes a rollover once the file has reached the specified size.
                    SizeBasedTriggeringPolicy:
                        size: 4096 KB		# The size can be specified in bytes, with the suffix KB, MB, GB, or TB, for example 20MB. The size may also contain a fractional value such as 1.5 MB. When combined with a time based triggering policy the file pattern must contain a %i otherwise the target file will be overwritten on every rollover as the SizeBased Triggering Policy will not cause the timestamp value in the file name to change.

                # The default rollover strategy accepts both a date/time pattern and an integer from the filePattern attribute specified on the RollingFileAppender itself. If the date/time pattern is present it will be replaced with the current date and time values. If the pattern contains an integer it will be incremented on each rollover. If the pattern contains both a date/time and integer in the pattern the integer will be incremented until the result of the date/time pattern changes.
                DefaultRolloverStrategy:
                    max: 20				# [Default: 7] The maximum value of the counter. Once this values is reached older archives will be deleted on subsequent rollovers.
                    min: 1				# [Default: 1] The minimum value of the counter.
                    fileIndex: max	# [Default: max] [max/min/nomax] If set to "max" (the default), files with a higher index will be newer than files with a smaller index. If set to "min", file renaming and the counter will follow the Fixed Window strategy described above. Finally, as of release 2.8, if the fileIndex attribute is set to "nomax" then the min and max values will be ignored and file numbering will increment by 1 and each rollover will have an incrementally higher value with no maximum number of files.
                    # compressionLevel: 9	 # Sets the compression level, 0-9, where 0 = none, 1 = best speed, through 9 = best compression. Only implemented for ZIP files.
                    # tempCompressedFilePattern: archived-${package-name-root}-debug-%d{yyyy-MM-dd-HH-mm}-%i.log	   # The pattern of the file name of the archived log file during compression.
                    Delete:
                        basePath: ${package-archive-rolling-path-root}
                        maxDepth: 2
                        # testMode: true	  # [Default: false] If true, files are not deleted but instead a message is printed to the status logger at INFO level. Use this to do a dry run to test if the configuration works as expected.
                        IfFileName:
                            glob: "*/${package-name-root}-debug-*.log.gz"
                        IfLastModified:
                            age: P2D
                            # age: PT1S	# https://logging.apache.org/log4j/2.x/log4j-core/apidocs/org/apache/logging/log4j/core/appender/rolling/action/Duration.html#parseCharSequence
                Filters:
                    LevelRangeFilter:
                        maxLevel: debug
                        minLevel: debug
                        onMatch: accept
                        onMismatch: deny
            -
                name: RollingFile-${package-name-root}-error
                fileName: ${package-logs-root}/${package-logfile-rolling-root}-error.log	# [REMEMBER: While sing DirectWriteRolloverStrategy, this filed MUST NOT EXIST]
                filePattern: ${package-archive-rolling-path-root}/$${date:yyyy-MM}/${package-name-root}-error-%d{yyyy-MM-dd-HH-mm}-%i.log.gz
                PatternLayout:
                    header: "%d{ISO8601_OFFSET_DATE_TIME_HHCMM} Start of logging.%n%n"
                    footer: "%n%d{ISO8601_OFFSET_DATE_TIME_HHCMM} End of logging.%n%n%n"
                    pattern: ${currentLogLevel}
                Policies:
                    # Causes a rollover once the date/time pattern no longer applies to the active file
                    TimeBasedTriggeringPolicy:
                        interval: 60		# [Default: 1] How often a rollover should occur based on the most specific time unit in the date pattern.
                        modulate: false		# [Default: false] Indicates whether the interval should be adjusted to cause the next rollover to occur on the interval boundary.
                        maxRandomDelay: 0   # [Default: 0] Indicates the maximum number of seconds to randomly delay a rollover.
                    # Causes a rollover once the file has reached the specified size.
                    SizeBasedTriggeringPolicy:
                        size: 4096 KB		# The size can be specified in bytes, with the suffix KB, MB, GB, or TB, for example 20MB. The size may also contain a fractional value such as 1.5 MB. When combined with a time based triggering policy the file pattern must contain a %i otherwise the target file will be overwritten on every rollover as the SizeBased Triggering Policy will not cause the timestamp value in the file name to change.

                # The default rollover strategy accepts both a date/time pattern and an integer from the filePattern attribute specified on the RollingFileAppender itself. If the date/time pattern is present it will be replaced with the current date and time values. If the pattern contains an integer it will be incremented on each rollover. If the pattern contains both a date/time and integer in the pattern the integer will be incremented until the result of the date/time pattern changes.
                DefaultRolloverStrategy:
                    max: 20				# [Default: 7] The maximum value of the counter. Once this values is reached older archives will be deleted on subsequent rollovers.
                    min: 1				# [Default: 1] The minimum value of the counter.
                    fileIndex: max	# [Default: max] [max/min/nomax] If set to "max" (the default), files with a higher index will be newer than files with a smaller index. If set to "min", file renaming and the counter will follow the Fixed Window strategy described above. Finally, as of release 2.8, if the fileIndex attribute is set to "nomax" then the min and max values will be ignored and file numbering will increment by 1 and each rollover will have an incrementally higher value with no maximum number of files.
                    # compressionLevel: 9	 # Sets the compression level, 0-9, where 0 = none, 1 = best speed, through 9 = best compression. Only implemented for ZIP files.
                    # tempCompressedFilePattern: archived-${package-name-root}-error-%d{yyyy-MM-dd-HH-mm}-%i.log	   # The pattern of the file name of the archived log file during compression.
                    Delete:
                        basePath: ${package-archive-rolling-path-root}
                        maxDepth: 2
                        # testMode: true	  # [Default: false] If true, files are not deleted but instead a message is printed to the status logger at INFO level. Use this to do a dry run to test if the configuration works as expected.
                        IfFileName:
                            glob: "*/${package-name-root}-error-*.log.gz"
                        IfLastModified:
                            age: P2D
                            # age: PT1S	# https://logging.apache.org/log4j/2.x/log4j-core/apidocs/org/apache/logging/log4j/core/appender/rolling/action/Duration.html#parseCharSequence
                Filters:
                    LevelRangeFilter:
                        maxLevel: error
                        minLevel: error
                        onMatch: accept
                        onMismatch: deny



    Loggers:
        root:
            level: trace
            AppenderRef:
                -
                    level: info
                    ref: STDOUT
                -
                    level: trace
                    ref: RollingFile-${package-name-root}-normal
                -
                    level: trace
                    ref: RollingFile-${package-name-root}-verbose
                -
                    level: trace
                    ref: RollingFile-${package-name-root}-info
                -
                    level: trace
                    ref: RollingFile-${package-name-root}-debug
                -
                    level: trace
                    ref: RollingFile-${package-name-root}-error